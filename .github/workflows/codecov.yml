name: PHP Code Coverage Tests

on:
  push:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  main-codecov:
    runs-on: ubuntu-latest
    env:
      COMPOSER_ALLOW_SUPERUSER: 1
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        php-versions: ['8.2']
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup PHP, with composer and extensions
      uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, dom, fileinfo, mysql, gd, curl, zip, sqlite, xml,
        coverage: xdebug
    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        # Use composer.json for key, if composer.lock is not committed.
        # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    - name: Install Composer dependencies
      run: composer install --no-progress  --optimize-autoloader
    - name: Npm install
      uses: actions/setup-node@v3
      with:
        node-version: 22
        cache: 'npm'
        cache-dependency-path: ./package-lock.json
    - run: npm install
    - run: npm run build

    - name: Copy env
      run: |
        rm -f .env
        cp .env.dusk .env
        rm -f .env.testing
        rm -f .env.dusk
        sed -i 's/APP_ENV=local/APP_ENV=testing/g' .env
        sed -i 's/APP_ENV=production/APP_ENV=testing/g' .env

    - name: Run PHPUnit
      run: composer test-coverage
    - name: Code Cov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: clover.xml
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)

